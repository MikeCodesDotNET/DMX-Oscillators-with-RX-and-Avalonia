using System;

namespace LFO_Tests.Models
{

	public class Sine : Oscillator
	{
		public Sine(double rate)
		{
			Rate = rate;

			this.table = new float[] { 0f, 0.04906768f, 0.09801714f, 0.1467305f, 0.1950903f, 0.2429802f, 0.2902847f, 0.3368899f, 0.3826834f, 0.4275551f,
														0.4713967f, 0.5141028f, 0.5555702f, 0.5956993f, 0.6343933f, 0.671559f, 0.7071068f, 0.7409511f, 0.7730104f, 0.8032075f,
														0.8314696f, 0.8577286f, 0.8819213f, 0.9039893f, 0.9238795f, 0.9415441f, 0.9569404f, 0.9700313f, 0.9807853f, 0.9891765f,
														0.9951847f, 0.9987954f, 1f, 0.9987954f, 0.9951847f, 0.9891765f, 0.9807853f, 0.9700313f, 0.9569404f, 0.9415441f,
														0.9238795f, 0.9039893f, 0.8819213f, 0.8577286f, 0.8314696f, 0.8032075f, 0.7730104f, 0.7409511f, 0.7071068f, 0.671559f,
														0.6343933f, 0.5956993f, 0.5555702f, 0.5141028f, 0.4713967f, 0.4275551f, 0.3826834f, 0.3368899f, 0.2902847f, 0.2429802f,
														0.1950903f, 0.1467305f, 0.09801714f, 0.04906768f, 1.225148E-16f, -0.04906768f, -0.09801714f, -0.1467305f, -0.1950903f, -0.2429802f,
														-0.2902847f, -0.3368899f, -0.3826834f, -0.4275551f, -0.4713967f, -0.5141028f, -0.5555702f, -0.5956993f, -0.6343933f, -0.671559f,
														-0.7071068f, -0.7409511f, -0.7730104f, -0.8032075f, -0.8314696f, -0.8577286f, -0.8819213f, -0.9039893f, -0.9238795f, -0.9415441f,
														-0.9569404f, -0.9700313f, -0.9807853f, -0.9891765f, -0.9951847f, -0.9987954f, -1f, -0.9987954f, -0.9951847f, -0.9891765f,
														-0.9807853f, -0.9700313f, -0.9569404f, -0.9415441f, -0.9238795f, -0.9039893f, -0.8819213f, -0.8577286f, -0.8314696f, -0.8032075f,
														-0.7730104f, -0.7409511f, -0.7071068f, -0.671559f, -0.6343933f, -0.5956993f, -0.5555702f, -0.5141028f, -0.4713967f, -0.4275551f,
														-0.3826834f, -0.3368899f, -0.2902847f, -0.2429802f, -0.1950903f, -0.1467305f, -0.09801714f, -0.04906768f };
		}

		public override void CalcValue()
		{
			var nextValue = table[currentStep];
			nextValue += (float)Offset;
			if (nextValue < -1.0f)
				nextValue = -1.0f;

			if (nextValue > 1.0f)
				nextValue = 1.0f;

			Value = nextValue;

			//Value.OnNext(0.5 + 0.5 * Math.Sin(currentStep / Rate * 2 * Math.PI));
		}
	}

}
